---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Dylan Malandain.
--- DateTime: 21/04/2019 21:20
---

---round
---@param num number
---@param numDecimalPlaces number
---@return number
---@public
function math.round(num, numDecimalPlaces)
    return tonumber(string.format("%." .. (numDecimalPlaces or 0) .. "f", num))
end

---starts
---@param String string
---@param Start number
---@return number
---@public
function string.starts(String, Start)
    return string.sub(String, 1, string.len(Start)) == Start
end

---@type table
AzoKiUI.Menus = setmetatable({}, AzoKiUI.Menus)

---@type table
---@return boolean
AzoKiUI.Menus.__call = function()
    return true
end

---@type table
AzoKiUI.Menus.__index = AzoKiUI.Menus

---@type table
AzoKiUI.CurrentMenu = nil

---@type table
AzoKiUI.NextMenu = nil

---@type number
AzoKiUI.Options = 0

---@type number
AzoKiUI.ItemOffset = 0

---@type number
AzoKiUI.StatisticPanelCount = 0

---@type table
AzoKiUI.UI = {
    Current = "AzoKiUI",
    Style = {
        AzoKiUI = {
            Width = 100
        },
        NativeUI = {
            Width = 0
        }
    }
}

---@type table
AzoKiUI.Settings = {
    Debug = false,
    Controls = {
        Up = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 172 },
                { 1, 172 },
                { 2, 172 },
                { 0, 241 },
                { 1, 241 },
                { 2, 241 },
            },
        },
        Down = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 173 },
                { 1, 173 },
                { 2, 173 },
                { 0, 242 },
                { 1, 242 },
                { 2, 242 },
            },
        },
        Left = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 174 },
                { 1, 174 },
                { 2, 174 },
            },
        },
        Right = {
            Enabled = true,
            Pressed = false,
            Active = false,
            Keys = {
                { 0, 175 },
                { 1, 175 },
                { 2, 175 },
            },
        },
        SliderLeft = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 174 },
                { 1, 174 },
                { 2, 174 },
            },
        },
        SliderRight = {
            Enabled = true,
            Pressed = false,
            Active = false,
            Keys = {
                { 0, 175 },
                { 1, 175 },
                { 2, 175 },
            },
        },
        Select = {
            Enabled = true,
            Pressed = false,
            Active = false,
            Keys = {
                { 0, 201 },
                { 1, 201 },
                { 2, 201 },
            },
        },
        Back = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 177 },
                { 1, 177 },
                { 2, 177 },
                { 0, 199 },
                { 1, 199 },
                { 2, 199 },
            },
        },
        Click = {
            Enabled = true,
            Active = false,
            Pressed = false,
            Keys = {
                { 0, 24 },
            },
        },
        Enabled = {
            Controller = {
                { 0, 2 }, -- Look Up and Down
                { 0, 1 }, -- Look Left and Right
                { 0, 25 }, -- Aim
                { 0, 24 }, -- Attack
            },
            Keyboard = {
                { 0, 201 }, -- Select
                { 0, 195 }, -- X axis
                { 0, 196 }, -- Y axis
                { 0, 187 }, -- Down
                { 0, 188 }, -- Up
                { 0, 189 }, -- Left
                { 0, 190 }, -- Right
                { 0, 202 }, -- Back
                { 0, 217 }, -- Select
                { 0, 242 }, -- Scroll down
                { 0, 241 }, -- Scroll up
                { 0, 239 }, -- Cursor X
                { 0, 240 }, -- Cursor Y
                { 0, 31 }, -- Move Up and Down
                { 0, 30 }, -- Move Left and Right
                { 0, 21 }, -- Sprint
                { 0, 22 }, -- Jump
                { 0, 23 }, -- Enter
                { 0, 75 }, -- Exit Vehicle
                { 0, 71 }, -- Accelerate Vehicle
                { 0, 72 }, -- Vehicle Brake
                { 0, 59 }, -- Move Vehicle Left and Right
                { 0, 89 }, -- Fly Yaw Left
                { 0, 9 }, -- Fly Left and Right
                { 0, 8 }, -- Fly Up and Down
                { 0, 90 }, -- Fly Yaw Right
                { 0, 76 }, -- Vehicle Handbrake
            },
        },
    },
    Audio = {
        Id = nil,
        Use = "AzoKiUI",
        AzoKiUI = {
            UpDown = {
                audioName = "HUD_FREEMODE_SOUNDSET",
                audioRef = "NAV_UP_DOWN",
            },
            LeftRight = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "NAV_LEFT_RIGHT",
            },
            Select = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "SELECT",
            },
            Back = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "BACK",
            },
            Error = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "ERROR",
            },
            Slider = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "CONTINUOUS_SLIDER",
                Id = nil
            },
        },
        NativeUI = {
            UpDown = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "NAV_UP_DOWN",
            },
            LeftRight = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "NAV_LEFT_RIGHT",
            },
            Select = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "SELECT",
            },
            Back = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "BACK",
            },
            Error = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "ERROR",
            },
            Slider = {
                audioName = "HUD_FRONTEND_DEFAULT_SOUNDSET",
                audioRef = "CONTINUOUS_SLIDER",
                Id = nil
            },
        }
    },
    Items = {
        Title = {
            Background = { Width = 431, Height = 107 },
            Text = { X = 215, Y = 20, Scale = 1.15 },
        },
        Subtitle = {
            Background = { Width = 431, Height = 37 },
            Text = { X = 8, Y = 3, Scale = 0.35 },
            PreText = { X = 425, Y = 3, Scale = 0.35 },
        },
        Background = { Dictionary = "commonmenu", Texture = "gradient_bgd", Y = 0, Width = 431 },
        Navigation = {
            Rectangle = { Width = 431, Height = 18 },
            Offset = 5,
            Arrows = { Dictionary = "commonmenu", Texture = "shop_arrows_upanddown", X = 190, Y = -6, Width = 50, Height = 50 },
        },
        Description = {
            Bar = { Y = 4, Width = 431, Height = 4 },
            Background = { Dictionary = "commonmenu", Texture = "gradient_bgd", Y = 4, Width = 431, Height = 30 },
            Text = { X = 8, Y = 10, Scale = 0.35 },
        },
    },
    Panels = {
        Grid = {
            Background = { Dictionary = "commonmenu", Texture = "gradient_bgd", Y = 4, Width = 431, Height = 275 },
            Grid = { Dictionary = "pause_menu_pages_char_mom_dad", Texture = "nose_grid", X = 115.5, Y = 47.5, Width = 200, Height = 200 },
            Circle = { Dictionary = "mpinventory", Texture = "in_world_circle", X = 115.5, Y = 47.5, Width = 20, Height = 20 },
            Text = {
                Top = { X = 215.5, Y = 15, Scale = 0.35 },
                Bottom = { X = 215.5, Y = 250, Scale = 0.35 },
                Left = { X = 57.75, Y = 130, Scale = 0.35 },
                Right = { X = 373.25, Y = 130, Scale = 0.35 },
            },
        },
        Percentage = {
            Background = { Dictionary = "commonmenu", Texture = "gradient_bgd", Y = 4, Width = 431, Height = 76 },
            Bar = { X = 9, Y = 50, Width = 413, Height = 10 },
            Text = {
                Left = { X = 25, Y = 15, Scale = 0.35 },
                Middle = { X = 215.5, Y = 15, Scale = 0.35 },
                Right = { X = 398, Y = 15, Scale = 0.35 },
            },
        },
    },
}

function AzoKiUI.SetScaleformParams(scaleform, data)
    data = data or {}
    for k, v in pairs(data) do
        PushScaleformMovieFunction(scaleform, v.name)
        if v.param then
            for _, par in pairs(v.param) do
                if math.type(par) == "integer" then
                    PushScaleformMovieFunctionParameterInt(par)
                elseif type(par) == "boolean" then
                    PushScaleformMovieFunctionParameterBool(par)
                elseif math.type(par) == "float" then
                    PushScaleformMovieFunctionParameterFloat(par)
                elseif type(par) == "string" then
                    PushScaleformMovieFunctionParameterString(par)
                end
            end
        end
        if v.func then
            v.func()
        end
        PopScaleformMovieFunctionVoid()
    end
end

---Visible
---@param Menu function
---@param Value boolean
---@return table
---@public
function AzoKiUI.Visible(Menu, Value)
    if Menu ~= nil then
        if Menu() then
            if type(Value) == "boolean" then
                if Value then
                    if AzoKiUI.CurrentMenu ~= nil then
                        AzoKiUI.CurrentMenu.Closed()
                        AzoKiUI.CurrentMenu.Open = not Value
                    end
                    Menu:UpdateInstructionalButtons(Value);
                    Menu:UpdateCursorStyle();
                    AzoKiUI.CurrentMenu = Menu
                    menuOpen = true
                else
                    menuOpen = false
                    AzoKiUI.CurrentMenu = nil
                end
                Menu.Open = Value
                AzoKiUI.Options = 0
                AzoKiUI.ItemOffset = 0
                AzoKiUI.LastControl = false
            else
                return Menu.Open
            end
        end
    end
end 

function AzoKiUI.CloseAll()
    menuOpen = false

    if AzoKiUI.CurrentMenu ~= nil then
        local parent = AzoKiUI.CurrentMenu.Parent
        while parent ~= nil do
            parent.Index = 1
            parent.Pagination.Minimum = 1
            parent.Pagination.Maximum = 10
            parent = parent.Parent
        end
        AzoKiUI.CurrentMenu.Index = 1
        AzoKiUI.CurrentMenu.Pagination.Minimum = 1
        AzoKiUI.CurrentMenu.Pagination.Maximum = 10
        AzoKiUI.CurrentMenu.Open = false
        AzoKiUI.CurrentMenu = nil
    end
    AzoKiUI.Options = 0
    AzoKiUI.ItemOffset = 0
    ResetScriptGfxAlign()
end

---Banner
---@return nil
---@public
---@param Enabled boolean
function AzoKiUI.Banner(Enabled, Glare)
    if type(Enabled) == "boolean" then
        if Enabled == true then


            if AzoKiUI.CurrentMenu ~= nil then
                if AzoKiUI.CurrentMenu() then


                    AzoKiUI.ItemsSafeZone(AzoKiUI.CurrentMenu)

                    if AzoKiUI.CurrentMenu.Sprite then
                        RenderSprite(AzoKiUI.CurrentMenu.Sprite.Dictionary, AzoKiUI.CurrentMenu.Sprite.Texture, AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y, AzoKiUI.Settings.Items.Title.Background.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.Settings.Items.Title.Background.Height, nil)
                    else
                        RenderRectangle(AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y, AzoKiUI.Settings.Items.Title.Background.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.Settings.Items.Title.Background.Height, AzoKiUI.CurrentMenu.Rectangle.R, AzoKiUI.CurrentMenu.Rectangle.G, AzoKiUI.CurrentMenu.Rectangle.B, AzoKiUI.CurrentMenu.Rectangle.A)
                    end

                    --if (AzoKiUI.CurrentMenu.WidthOffset == 100) then
                        if Glare then

                            local ScaleformMovie = RequestScaleformMovie("MP_MENU_GLARE")
                            while not HasScaleformMovieLoaded(ScaleformMovie) do
                                Citizen.Wait(0)
                            end

							---@type number
							local Glarewidth = AzoKiUI.Settings.Items.Title.Background.Width

							---@type number
							local Glareheight = AzoKiUI.Settings.Items.Title.Background.Height
							---@type number
							local GlareX = AzoKiUI.CurrentMenu.X / 1860 + (AzoKiUI.CurrentMenu.SafeZoneSize.X / (64.399 - (AzoKiUI.CurrentMenu.WidthOffset * 0.065731)))
                            ---@type number
                            local GlareY = AzoKiUI.CurrentMenu.Y / 1080 + AzoKiUI.CurrentMenu.SafeZoneSize.Y / 33.195020746888
                            AzoKiUI.SetScaleformParams(ScaleformMovie, {
                                { name = "SET_DATA_SLOT", param = { GetGameplayCamRelativeHeading() } }
                            })

                            DrawScaleformMovie(ScaleformMovie, GlareX, GlareY, Glarewidth / 430, Glareheight / 100, 255, 255, 255, 255, 0)

                        end
                    --end

                    RenderText(AzoKiUI.CurrentMenu.Title, AzoKiUI.CurrentMenu.X + AzoKiUI.Settings.Items.Title.Text.X + (AzoKiUI.CurrentMenu.WidthOffset / 2), AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Title.Text.Y, 1, AzoKiUI.Settings.Items.Title.Text.Scale, 255, 255, 255, 255, 1)
                    AzoKiUI.ItemOffset = AzoKiUI.ItemOffset + AzoKiUI.Settings.Items.Title.Background.Height
                end
            end
        end
    else
        error("Enabled is not boolean")
    end
end

---CloseAll -- TODO 
---@return nil
---@public
-- function AzoKiUI:CloseAll()
--     AzoKiUI.PlaySound(AzoKiUI.Settings.Audio.Library, AzoKiUI.Settings.Audio.Back)
--     AzoKiUI.NextMenu = nil
--     AzoKiUI.Visible(AzoKiUI.CurrentMenu, false)
-- end

---Subtitle
---@return nil
---@public
function AzoKiUI.Subtitle()
    if AzoKiUI.CurrentMenu ~= nil then
        if AzoKiUI.CurrentMenu() then
            AzoKiUI.ItemsSafeZone(AzoKiUI.CurrentMenu)
            if AzoKiUI.CurrentMenu.Subtitle ~= "" then
                RenderRectangle(AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.ItemOffset, AzoKiUI.Settings.Items.Subtitle.Background.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.Settings.Items.Subtitle.Background.Height + AzoKiUI.CurrentMenu.SubtitleHeight, 0, 0, 0, 255)
                RenderText(AzoKiUI.CurrentMenu.Subtitle, AzoKiUI.CurrentMenu.X + AzoKiUI.Settings.Items.Subtitle.Text.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Subtitle.Text.Y + AzoKiUI.ItemOffset, 0, AzoKiUI.Settings.Items.Subtitle.Text.Scale, 245, 245, 245, 255, nil, false, false, AzoKiUI.Settings.Items.Subtitle.Background.Width + AzoKiUI.CurrentMenu.WidthOffset)
                if AzoKiUI.CurrentMenu.Index > AzoKiUI.CurrentMenu.Options or AzoKiUI.CurrentMenu.Index < 0 then
                    AzoKiUI.CurrentMenu.Index = 1
                end
                AzoKiUI.RefreshPagination()
                if AzoKiUI.CurrentMenu.PageCounter == nil then
                    RenderText(AzoKiUI.CurrentMenu.PageCounterColour .. AzoKiUI.CurrentMenu.Index .. " / " .. AzoKiUI.CurrentMenu.Options, AzoKiUI.CurrentMenu.X + AzoKiUI.Settings.Items.Subtitle.PreText.X + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Subtitle.PreText.Y + AzoKiUI.ItemOffset, 0, AzoKiUI.Settings.Items.Subtitle.PreText.Scale, 245, 245, 245, 255, 2)
                else
                    RenderText(AzoKiUI.CurrentMenu.PageCounter, AzoKiUI.CurrentMenu.X + AzoKiUI.Settings.Items.Subtitle.PreText.X + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Subtitle.PreText.Y + AzoKiUI.ItemOffset, 0, AzoKiUI.Settings.Items.Subtitle.PreText.Scale, 245, 245, 245, 255, 2)
                end
                AzoKiUI.ItemOffset = AzoKiUI.ItemOffset + AzoKiUI.Settings.Items.Subtitle.Background.Height
            end
        end
    end
end

---Background
---@return nil
---@public
function AzoKiUI.Background()
    if AzoKiUI.CurrentMenu ~= nil then
        if AzoKiUI.CurrentMenu() then
            AzoKiUI.ItemsSafeZone(AzoKiUI.CurrentMenu)
            SetScriptGfxDrawOrder(0)
            RenderSprite(AzoKiUI.Settings.Items.Background.Dictionary, AzoKiUI.Settings.Items.Background.Texture, AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Background.Y + AzoKiUI.CurrentMenu.SubtitleHeight, AzoKiUI.Settings.Items.Background.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.ItemOffset, 0, 0, 0, 0, 255)
            SetScriptGfxDrawOrder(1)
        end
    end
end

---Description
---@return nil
---@public
function AzoKiUI.Description()
    if AzoKiUI.CurrentMenu ~= nil and AzoKiUI.CurrentMenu.Description ~= nil then
        if AzoKiUI.CurrentMenu() then
            AzoKiUI.ItemsSafeZone(AzoKiUI.CurrentMenu)
            RenderRectangle(AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Description.Bar.Y + AzoKiUI.CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, AzoKiUI.Settings.Items.Description.Bar.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.Settings.Items.Description.Bar.Height, 0, 0, 0, 255)
            RenderSprite(AzoKiUI.Settings.Items.Description.Background.Dictionary, AzoKiUI.Settings.Items.Description.Background.Texture, AzoKiUI.CurrentMenu.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Description.Background.Y + AzoKiUI.CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, AzoKiUI.Settings.Items.Description.Background.Width + AzoKiUI.CurrentMenu.WidthOffset, AzoKiUI.CurrentMenu.DescriptionHeight, 0, 0, 0, 255)
            RenderText(AzoKiUI.CurrentMenu.Description, AzoKiUI.CurrentMenu.X + AzoKiUI.Settings.Items.Description.Text.X, AzoKiUI.CurrentMenu.Y + AzoKiUI.Settings.Items.Description.Text.Y + AzoKiUI.CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, 0, AzoKiUI.Settings.Items.Description.Text.Scale, 255, 255, 255, 255, nil, false, false, AzoKiUI.Settings.Items.Description.Background.Width + AzoKiUI.CurrentMenu.WidthOffset - 8.0)
            AzoKiUI.ItemOffset = AzoKiUI.ItemOffset + AzoKiUI.CurrentMenu.DescriptionHeight + AzoKiUI.Settings.Items.Description.Bar.Y
        end
    end
end

---Render
---@param instructionalButton boolean
---@return nil
---@public
function AzoKiUI.Render(instructionalButton)
    if AzoKiUI.CurrentMenu ~= nil then
        if AzoKiUI.CurrentMenu() then
            if AzoKiUI.CurrentMenu.Safezone then
                ResetScriptGfxAlign()
            end
            if (instructionalButton) then
                DrawScaleformMovieFullscreen(AzoKiUI.CurrentMenu.InstructionalScaleform, 255, 255, 255, 255, 0)
            end
            AzoKiUI.CurrentMenu.Options = AzoKiUI.Options
            AzoKiUI.CurrentMenu.SafeZoneSize = nil
            AzoKiUI.Controls()
            AzoKiUI.Options = 0
            AzoKiUI.StatisticPanelCount = 0
            AzoKiUI.ItemOffset = 0
            if AzoKiUI.CurrentMenu.Controls.Back.Enabled and AzoKiUI.CurrentMenu.Closable then
                if AzoKiUI.CurrentMenu.Controls.Back.Pressed then
                    AzoKiUI.CurrentMenu.Controls.Back.Pressed = false
                    local Audio = AzoKiUI.Settings.Audio
                    AzoKiUI.PlaySound(Audio[Audio.Use].Back.audioName, Audio[Audio.Use].Back.audioRef)
                    if AzoKiUI.CurrentMenu.Closed ~= nil then
                        collectgarbage()
                        AzoKiUI.CurrentMenu.Closed()
                    end
                    if AzoKiUI.CurrentMenu.Parent ~= nil then
                        if AzoKiUI.CurrentMenu.Parent() then
                            AzoKiUI.NextMenu = AzoKiUI.CurrentMenu.Parent
                            AzoKiUI.CurrentMenu:UpdateCursorStyle()
                        else
                            --print('xxx') Debug print
                            AzoKiUI.NextMenu = nil
                            AzoKiUI.Visible(AzoKiUI.CurrentMenu, false)
                        end
                    else
                        --print('zz') Debug print
                        AzoKiUI.NextMenu = nil
                        AzoKiUI.Visible(AzoKiUI.CurrentMenu, false)
                    end
                end
            end
            if AzoKiUI.NextMenu ~= nil then
                if AzoKiUI.NextMenu() then
                    AzoKiUI.Visible(AzoKiUI.CurrentMenu, false)
                    AzoKiUI.Visible(AzoKiUI.NextMenu, true)
                    AzoKiUI.CurrentMenu.Controls.Select.Active = false
                    AzoKiUI.NextMenu = nil
                    AzoKiUI.LastControl = false
                end
            end
        end
    end
end

---ItemsDescription
---@param CurrentMenu table
---@param Description string
---@param Selected boolean
---@return nil
---@public
function AzoKiUI.ItemsDescription(CurrentMenu, Description, Selected)
    ---@type table
    if Description ~= "" or Description ~= nil then
        local SettingsDescription = AzoKiUI.Settings.Items.Description;
        if Selected and CurrentMenu.Description ~= Description then
            CurrentMenu.Description = Description or nil
            ---@type number
            local DescriptionLineCount = GetLineCount(CurrentMenu.Description, CurrentMenu.X + SettingsDescription.Text.X, CurrentMenu.Y + SettingsDescription.Text.Y + CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, 0, SettingsDescription.Text.Scale, 255, 255, 255, 255, nil, false, false, SettingsDescription.Background.Width + (CurrentMenu.WidthOffset - 5.0))
            if DescriptionLineCount > 1 then
                CurrentMenu.DescriptionHeight = SettingsDescription.Background.Height * DescriptionLineCount
            else
                CurrentMenu.DescriptionHeight = SettingsDescription.Background.Height + 7
            end
        end
    end
end

---MouseBounds
---@param CurrentMenu table
---@param Selected boolean
---@param Option number
---@param SettingsButton table
---@return boolean
---@public
function AzoKiUI.ItemsMouseBounds(CurrentMenu, Selected, Option, SettingsButton)
    ---@type boolean
    local Hovered = false
    Hovered = AzoKiUI.IsMouseInBounds(CurrentMenu.X + CurrentMenu.SafeZoneSize.X, CurrentMenu.Y + SettingsButton.Rectangle.Y + CurrentMenu.SafeZoneSize.Y + CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, SettingsButton.Rectangle.Width + CurrentMenu.WidthOffset, SettingsButton.Rectangle.Height)
    if Hovered and not Selected then
        RenderRectangle(CurrentMenu.X, CurrentMenu.Y + SettingsButton.Rectangle.Y + CurrentMenu.SubtitleHeight + AzoKiUI.ItemOffset, SettingsButton.Rectangle.Width + CurrentMenu.WidthOffset, SettingsButton.Rectangle.Height, 255, 255, 255, 20)
        if CurrentMenu.Controls.Click.Active then
            CurrentMenu.Index = Option
            local Audio = AzoKiUI.Settings.Audio
            AzoKiUI.PlaySound(Audio[Audio.Use].Error.audioName, Audio[Audio.Use].Error.audioRef)
        end
    end
    return Hovered;
end

---ItemsSafeZone
---@param CurrentMenu table
---@return nil
---@public
function AzoKiUI.ItemsSafeZone(CurrentMenu)
    if not CurrentMenu.SafeZoneSize then
        CurrentMenu.SafeZoneSize = { X = 0, Y = 0 }
        if CurrentMenu.Safezone then
            CurrentMenu.SafeZoneSize = AzoKiUI.GetSafeZoneBounds()
            SetScriptGfxAlign(76, 84)
            SetScriptGfxAlignParams(0, 0, 0, 0)
        end
    end
end

function AzoKiUI.CurrentIsEqualTo(Current, To, Style, DefaultStyle)
    if (Current == To) then
        return Style;
    else
        return DefaultStyle or {};
    end
end

function AzoKiUI.RefreshPagination()
    if (AzoKiUI.CurrentMenu ~= nil) then
        if (AzoKiUI.CurrentMenu.Index > 10) then
            local offset = AzoKiUI.CurrentMenu.Index - 10
            AzoKiUI.CurrentMenu.Pagination.Minimum = 1 + offset
            AzoKiUI.CurrentMenu.Pagination.Maximum = 10 + offset
        else
            AzoKiUI.CurrentMenu.Pagination.Minimum = 1
            AzoKiUI.CurrentMenu.Pagination.Maximum = 10
        end
    end
end

function AzoKiUI.IsVisible(menu, header, glare, instructional, items, panels)
    if (AzoKiUI.Visible(menu)) then
        if (header == true) then
            AzoKiUI.Banner(true, glare or false)
        end
        AzoKiUI.Subtitle()
        if (items ~= nil) then
            items()
        end
        AzoKiUI.Background();
        AzoKiUI.Navigation();
        AzoKiUI.Description();
        if (panels ~= nil) then
            panels()
        end
        AzoKiUI.Render(instructional or false)
    end
end


---CreateWhile
---@param wait number
---@param menu table
---@param key number
---@param closure function
---@return void
---@public
function AzoKiUI.CreateWhile(wait, menu, key, closure)
    Citizen.CreateThread(function()
        while (true) do
            Citizen.Wait(wait or 0.1)

            if (key ~= nil) then
                if IsControlJustPressed(1, key) then
                    AzoKiUI.Visible(menu, not AzoKiUI.Visible(menu))
                end
            end

            closure()
        end
    end)
end

---SetStyleAudio
---@param StyleAudio string
---@return void
---@public
function AzoKiUI.SetStyleAudio(StyleAudio)
    AzoKiUI.Settings.Audio.Use = StyleAudio or "AzoKiUI"
end

function AzoKiUI.GetStyleAudio()
    return AzoKiUI.Settings.Audio.Use or "AzoKiUI"
end

